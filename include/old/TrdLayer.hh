/*
 *
 * TrdLayer.hh header template generated by fclass
 * Creation date : Tue Aug 28 11:18:18 2012
 * Copyright (c) 2012 Rémi Eté
 * All Right Reserved.
 *
 * Use and copying of these libraries and preparation of derivative works
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * Written by : R. Eté
 */


#ifndef TRDLAYER_HH
#define TRDLAYER_HH

#include <iostream>
#include <string>
#include <cstdlib>
#include <cmath>

// Geant4 includes
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4VPhysicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4VisAttributes.hh"
#include "G4VSensitiveDetector.hh"
#include "G4ThreeVector.hh"
#include "G4RotationMatrix.hh"
#include "G4Material.hh"
#include "G4SDManager.hh"

// GemSim includes
//#include "Tools.hh"

class G4Trd ;
class G4LogicalVolume ;
class G4VPhysicalVolume ;
class G4VisAttributes ;
class G4VSensitiveDetector ;

class TrdLayer {

   protected :
      G4String             layerName ;
      /// Trapezoidal shape
      G4Trd                *trapezoid ;
      /// Logical volume
      G4LogicalVolume      *logicalVolume ;
      /// Placement object
      G4VPhysicalVolume    *placement ;
      /// Visualization attribute
      G4VisAttributes      *visAttributes ;

   public :
      /// Cosntructor
      TrdLayer(const G4String &layerName,
	    G4double dx,
	    G4double dy1,
	    G4double dy2,
	    G4double dz ,
	    G4Material *material) ;
      /// Destructor
      virtual ~TrdLayer() ;
      /// Place the layer wrt a logical volume
      G4VPhysicalVolume *PlaceLayer(G4RotationMatrix *pRot,
	    G4ThreeVector tlate,
	    G4LogicalVolume *pMotherLogical,
	    G4int copyNo) ;

      inline void SetSensitiveDetector(G4VSensitiveDetector *sensDet) {logicalVolume->SetSensitiveDetector(sensDet) ;}
      inline void SetVisAttributes(G4VisAttributes *visAtt) {logicalVolume->SetVisAttributes(visAtt) ;}
      inline void SetUserLimits(G4UserLimits* userLimits) {logicalVolume->SetUserLimits(userLimits) ;}

      inline const G4VisAttributes *GetVisAttributes() {return logicalVolume->GetVisAttributes() ;}
      inline G4VSensitiveDetector *GetSensitiveDetector() {return logicalVolume->GetSensitiveDetector() ;}
      inline const G4Trd *GetTrdSolid() {return trapezoid ;}
      inline const G4String &GetLayerName() {return layerName ;}
      inline G4UserLimits* GetUserLimits() {return logicalVolume->GetUserLimits() ;}

};

#endif  // TRDLAYER_HH
